// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

#include "HttpClientBridge.hpp"  // my header
#include "HttpClientPlatformService.hpp"
#include "HttpResponse.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

HttpClientBridge::HttpClientBridge() : ::djinni::JniInterface<::EzoRed::Http::HttpClientBridge, HttpClientBridge>("com/ezored/http/HttpClientBridge$CppProxy") {}

HttpClientBridge::~HttpClientBridge() = default;


CJNIEXPORT void JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::EzoRed::Http::HttpClientBridge>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_ezored_http_HttpClientBridge_sharedInstance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::EzoRed::Http::HttpClientBridge::sharedInstance();
        return ::djinni::release(::djinni_generated::HttpClientBridge::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_native_1setPlatformService(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_ps)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Http::HttpClientBridge>(nativeRef);
        ref->setPlatformService(::djinni_generated::HttpClientPlatformService::toCpp(jniEnv, j_ps));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_native_1getPlatformService(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Http::HttpClientBridge>(nativeRef);
        auto r = ref->getPlatformService();
        return ::djinni::release(::djinni_generated::HttpClientPlatformService::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_native_1doGet(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Http::HttpClientBridge>(nativeRef);
        auto r = ref->doGet(::djinni::String::toCpp(jniEnv, j_url));
        return ::djinni::release(::djinni_generated::HttpResponse::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_native_1doHead(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Http::HttpClientBridge>(nativeRef);
        auto r = ref->doHead(::djinni::String::toCpp(jniEnv, j_url));
        return ::djinni::release(::djinni_generated::HttpResponse::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_native_1doPost(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_data, jstring j_contentType)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Http::HttpClientBridge>(nativeRef);
        auto r = ref->doPost(::djinni::String::toCpp(jniEnv, j_url),
                             ::djinni::String::toCpp(jniEnv, j_data),
                             ::djinni::String::toCpp(jniEnv, j_contentType));
        return ::djinni::release(::djinni_generated::HttpResponse::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_native_1doPut(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_data, jstring j_contentType)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Http::HttpClientBridge>(nativeRef);
        auto r = ref->doPut(::djinni::String::toCpp(jniEnv, j_url),
                            ::djinni::String::toCpp(jniEnv, j_data),
                            ::djinni::String::toCpp(jniEnv, j_contentType));
        return ::djinni::release(::djinni_generated::HttpResponse::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_native_1doDelete(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_data, jstring j_contentType)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Http::HttpClientBridge>(nativeRef);
        auto r = ref->doDelete(::djinni::String::toCpp(jniEnv, j_url),
                               ::djinni::String::toCpp(jniEnv, j_data),
                               ::djinni::String::toCpp(jniEnv, j_contentType));
        return ::djinni::release(::djinni_generated::HttpResponse::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_ezored_http_HttpClientBridge_00024CppProxy_native_1doPatch(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_data, jstring j_contentType)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Http::HttpClientBridge>(nativeRef);
        auto r = ref->doPatch(::djinni::String::toCpp(jniEnv, j_url),
                              ::djinni::String::toCpp(jniEnv, j_data),
                              ::djinni::String::toCpp(jniEnv, j_contentType));
        return ::djinni::release(::djinni_generated::HttpResponse::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
