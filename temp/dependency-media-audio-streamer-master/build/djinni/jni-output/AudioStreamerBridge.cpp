// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

#include "AudioStreamerBridge.hpp"  // my header
#include "AudioStreamerPlatformService.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

AudioStreamerBridge::AudioStreamerBridge() : ::djinni::JniInterface<::EzoRed::Media::AudioStreamerBridge, AudioStreamerBridge>("com/ezored/media/AudioStreamerBridge$CppProxy") {}

AudioStreamerBridge::~AudioStreamerBridge() = default;


CJNIEXPORT void JNICALL Java_com_ezored_media_AudioStreamerBridge_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::EzoRed::Media::AudioStreamerBridge>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_ezored_media_AudioStreamerBridge_sharedInstance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::EzoRed::Media::AudioStreamerBridge::sharedInstance();
        return ::djinni::release(::djinni_generated::AudioStreamerBridge::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_ezored_media_AudioStreamerBridge_00024CppProxy_native_1setPlatformService(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_ps)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Media::AudioStreamerBridge>(nativeRef);
        ref->setPlatformService(::djinni_generated::AudioStreamerPlatformService::toCpp(jniEnv, j_ps));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_ezored_media_AudioStreamerBridge_00024CppProxy_native_1getPlatformService(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Media::AudioStreamerBridge>(nativeRef);
        auto r = ref->getPlatformService();
        return ::djinni::release(::djinni_generated::AudioStreamerPlatformService::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_ezored_media_AudioStreamerBridge_00024CppProxy_native_1getUrl(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Media::AudioStreamerBridge>(nativeRef);
        auto r = ref->getUrl();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_ezored_media_AudioStreamerBridge_00024CppProxy_native_1setUrl(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Media::AudioStreamerBridge>(nativeRef);
        ref->setUrl(::djinni::String::toCpp(jniEnv, j_url));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_com_ezored_media_AudioStreamerBridge_00024CppProxy_native_1isPlaying(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Media::AudioStreamerBridge>(nativeRef);
        auto r = ref->isPlaying();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_ezored_media_AudioStreamerBridge_00024CppProxy_native_1play(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Media::AudioStreamerBridge>(nativeRef);
        ref->play();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_ezored_media_AudioStreamerBridge_00024CppProxy_native_1pause(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::EzoRed::Media::AudioStreamerBridge>(nativeRef);
        ref->pause();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
