// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

#import "EZRHttpClientBridge+Private.h"
#import "EZRHttpClientBridge.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "EZRHttpClientPlatformService+Private.h"
#import "EZRHttpResponse+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface EZRHttpClientBridge ()

- (id)initWithCpp:(const std::shared_ptr<::EzoRed::Http::HttpClientBridge>&)cppRef;

@end

@implementation EZRHttpClientBridge {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::EzoRed::Http::HttpClientBridge>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::EzoRed::Http::HttpClientBridge>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable EZRHttpClientBridge *)sharedInstance {
    try {
        auto objcpp_result_ = ::EzoRed::Http::HttpClientBridge::sharedInstance();
        return ::djinni_generated::HttpClientBridge::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPlatformService:(nullable id<EZRHttpClientPlatformService>)ps {
    try {
        _cppRefHandle.get()->setPlatformService(::djinni_generated::HttpClientPlatformService::toCpp(ps));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<EZRHttpClientPlatformService>)getPlatformService {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPlatformService();
        return ::djinni_generated::HttpClientPlatformService::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EZRHttpResponse *)doGet:(nonnull NSString *)url {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->doGet(::djinni::String::toCpp(url));
        return ::djinni_generated::HttpResponse::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EZRHttpResponse *)doHead:(nonnull NSString *)url {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->doHead(::djinni::String::toCpp(url));
        return ::djinni_generated::HttpResponse::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EZRHttpResponse *)doPost:(nonnull NSString *)url
                               data:(nonnull NSString *)data
                        contentType:(nonnull NSString *)contentType {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->doPost(::djinni::String::toCpp(url),
                                                          ::djinni::String::toCpp(data),
                                                          ::djinni::String::toCpp(contentType));
        return ::djinni_generated::HttpResponse::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EZRHttpResponse *)doPut:(nonnull NSString *)url
                              data:(nonnull NSString *)data
                       contentType:(nonnull NSString *)contentType {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->doPut(::djinni::String::toCpp(url),
                                                         ::djinni::String::toCpp(data),
                                                         ::djinni::String::toCpp(contentType));
        return ::djinni_generated::HttpResponse::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EZRHttpResponse *)doDelete:(nonnull NSString *)url
                                 data:(nonnull NSString *)data
                          contentType:(nonnull NSString *)contentType {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->doDelete(::djinni::String::toCpp(url),
                                                            ::djinni::String::toCpp(data),
                                                            ::djinni::String::toCpp(contentType));
        return ::djinni_generated::HttpResponse::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EZRHttpResponse *)doPatch:(nonnull NSString *)url
                                data:(nonnull NSString *)data
                         contentType:(nonnull NSString *)contentType {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->doPatch(::djinni::String::toCpp(url),
                                                           ::djinni::String::toCpp(data),
                                                           ::djinni::String::toCpp(contentType));
        return ::djinni_generated::HttpResponse::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto HttpClientBridge::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HttpClientBridge::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<EZRHttpClientBridge>(cpp);
}

}  // namespace djinni_generated

@end
