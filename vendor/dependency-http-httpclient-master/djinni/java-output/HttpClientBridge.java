// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

package com.ezored.http;

import java.util.concurrent.atomic.AtomicBoolean;

/** Native Http Client Bridge class */
public abstract class HttpClientBridge {
    public abstract void setPlatformService(HttpClientPlatformService ps);

    public abstract HttpClientPlatformService getPlatformService();

    public abstract HttpResponse doGet(String url);

    public abstract HttpResponse doHead(String url);

    public abstract HttpResponse doPost(String url, String data, String contentType);

    public abstract HttpResponse doPut(String url, String data, String contentType);

    public abstract HttpResponse doDelete(String url, String data, String contentType);

    public abstract HttpResponse doPatch(String url, String data, String contentType);

    public static native HttpClientBridge sharedInstance();

    private static final class CppProxy extends HttpClientBridge
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void setPlatformService(HttpClientPlatformService ps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPlatformService(this.nativeRef, ps);
        }
        private native void native_setPlatformService(long _nativeRef, HttpClientPlatformService ps);

        @Override
        public HttpClientPlatformService getPlatformService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPlatformService(this.nativeRef);
        }
        private native HttpClientPlatformService native_getPlatformService(long _nativeRef);

        @Override
        public HttpResponse doGet(String url)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_doGet(this.nativeRef, url);
        }
        private native HttpResponse native_doGet(long _nativeRef, String url);

        @Override
        public HttpResponse doHead(String url)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_doHead(this.nativeRef, url);
        }
        private native HttpResponse native_doHead(long _nativeRef, String url);

        @Override
        public HttpResponse doPost(String url, String data, String contentType)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_doPost(this.nativeRef, url, data, contentType);
        }
        private native HttpResponse native_doPost(long _nativeRef, String url, String data, String contentType);

        @Override
        public HttpResponse doPut(String url, String data, String contentType)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_doPut(this.nativeRef, url, data, contentType);
        }
        private native HttpResponse native_doPut(long _nativeRef, String url, String data, String contentType);

        @Override
        public HttpResponse doDelete(String url, String data, String contentType)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_doDelete(this.nativeRef, url, data, contentType);
        }
        private native HttpResponse native_doDelete(long _nativeRef, String url, String data, String contentType);

        @Override
        public HttpResponse doPatch(String url, String data, String contentType)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_doPatch(this.nativeRef, url, data, contentType);
        }
        private native HttpResponse native_doPatch(long _nativeRef, String url, String data, String contentType);
    }
}
