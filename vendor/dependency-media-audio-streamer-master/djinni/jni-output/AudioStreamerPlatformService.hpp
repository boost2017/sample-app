// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

#pragma once

#include "audio_streamer_platform_service.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class AudioStreamerPlatformService final : ::djinni::JniInterface<::EzoRed::Media::AudioStreamerPlatformService, AudioStreamerPlatformService> {
public:
    using CppType = std::shared_ptr<::EzoRed::Media::AudioStreamerPlatformService>;
    using CppOptType = std::shared_ptr<::EzoRed::Media::AudioStreamerPlatformService>;
    using JniType = jobject;

    using Boxed = AudioStreamerPlatformService;

    ~AudioStreamerPlatformService();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<AudioStreamerPlatformService>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<AudioStreamerPlatformService>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    AudioStreamerPlatformService();
    friend ::djinni::JniClass<AudioStreamerPlatformService>;
    friend ::djinni::JniInterface<::EzoRed::Media::AudioStreamerPlatformService, AudioStreamerPlatformService>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::EzoRed::Media::AudioStreamerPlatformService
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string getUrl() override;
        void setUrl(const std::string & url) override;
        bool isPlaying() override;
        void play() override;
        void pause() override;

    private:
        friend ::djinni::JniInterface<::EzoRed::Media::AudioStreamerPlatformService, ::djinni_generated::AudioStreamerPlatformService>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/ezored/media/AudioStreamerPlatformService") };
    const jmethodID method_getUrl { ::djinni::jniGetMethodID(clazz.get(), "getUrl", "()Ljava/lang/String;") };
    const jmethodID method_setUrl { ::djinni::jniGetMethodID(clazz.get(), "setUrl", "(Ljava/lang/String;)V") };
    const jmethodID method_isPlaying { ::djinni::jniGetMethodID(clazz.get(), "isPlaying", "()Z") };
    const jmethodID method_play { ::djinni::jniGetMethodID(clazz.get(), "play", "()V") };
    const jmethodID method_pause { ::djinni::jniGetMethodID(clazz.get(), "pause", "()V") };
};

}  // namespace djinni_generated
