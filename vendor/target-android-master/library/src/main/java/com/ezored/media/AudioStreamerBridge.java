// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

package com.ezored.media;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * The Audio Streamer Bridge class serves as a concrete class that wraps our proxy
 * implementation and provides our client a singleton instance to reuse.
 */
public abstract class AudioStreamerBridge {
    /**
     * Sets an instance of the proxy class that is used to implement the
     * platform specific proxy
     */
    public abstract void setPlatformService(AudioStreamerPlatformService ps);

    /**
     * Gets an instance of the proxy class that is used to implement the
     * platform specific proxy
     */
    public abstract AudioStreamerPlatformService getPlatformService();

    /** Provides the currently loaded URL song reference */
    public abstract String getUrl();

    /**
     * Sets the current URL song reference (will stop the player from playing
     * if it is currently playing)
     */
    public abstract void setUrl(String url);

    /**
     * Returns a boolean indicating whether or not the player is currently
     * playing some audio
     */
    public abstract boolean isPlaying();

    /** Tells the player to start playing audio. */
    public abstract void play();

    /** Tells the player to pause any audio it may be playing. */
    public abstract void pause();

    /**
     * A singleton instance of the audio streamer (in most applications you will
     * only be dealing with a single streamer reference since you don't want
     * multiple players playing at once)
     */
    public static native AudioStreamerBridge sharedInstance();

    private static final class CppProxy extends AudioStreamerBridge
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void setPlatformService(AudioStreamerPlatformService ps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPlatformService(this.nativeRef, ps);
        }
        private native void native_setPlatformService(long _nativeRef, AudioStreamerPlatformService ps);

        @Override
        public AudioStreamerPlatformService getPlatformService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPlatformService(this.nativeRef);
        }
        private native AudioStreamerPlatformService native_getPlatformService(long _nativeRef);

        @Override
        public String getUrl()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUrl(this.nativeRef);
        }
        private native String native_getUrl(long _nativeRef);

        @Override
        public void setUrl(String url)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setUrl(this.nativeRef, url);
        }
        private native void native_setUrl(long _nativeRef, String url);

        @Override
        public boolean isPlaying()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isPlaying(this.nativeRef);
        }
        private native boolean native_isPlaying(long _nativeRef);

        @Override
        public void play()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_play(this.nativeRef);
        }
        private native void native_play(long _nativeRef);

        @Override
        public void pause()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_pause(this.nativeRef);
        }
        private native void native_pause(long _nativeRef);
    }
}
