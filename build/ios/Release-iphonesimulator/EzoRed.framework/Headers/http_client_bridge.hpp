// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

#pragma once

#include <memory>
#include <string>

namespace EzoRed { namespace Http {

class HttpClientPlatformService;
struct HttpResponse;

/** Native Http Client Bridge class */
class HttpClientBridge {
public:
    virtual ~HttpClientBridge() {}

    static std::shared_ptr<HttpClientBridge> sharedInstance();

    virtual void setPlatformService(const std::shared_ptr<HttpClientPlatformService> & ps) = 0;

    virtual std::shared_ptr<HttpClientPlatformService> getPlatformService() = 0;

    virtual HttpResponse doGet(const std::string & url) = 0;

    virtual HttpResponse doHead(const std::string & url) = 0;

    virtual HttpResponse doPost(const std::string & url, const std::string & data, const std::string & content_type) = 0;

    virtual HttpResponse doPut(const std::string & url, const std::string & data, const std::string & content_type) = 0;

    virtual HttpResponse doDelete(const std::string & url, const std::string & data, const std::string & content_type) = 0;

    virtual HttpResponse doPatch(const std::string & url, const std::string & data, const std::string & content_type) = 0;
};

} }  // namespace EzoRed::Http
