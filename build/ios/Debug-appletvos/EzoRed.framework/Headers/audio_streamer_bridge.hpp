// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

#pragma once

#include <memory>
#include <string>

namespace EzoRed { namespace Media {

class AudioStreamerPlatformService;

/**
 * The Audio Streamer Bridge class serves as a concrete class that wraps our proxy
 * implementation and provides our client a singleton instance to reuse.
 */
class AudioStreamerBridge {
public:
    virtual ~AudioStreamerBridge() {}

    /**
     * A singleton instance of the audio streamer (in most applications you will
     * only be dealing with a single streamer reference since you don't want
     * multiple players playing at once)
     */
    static std::shared_ptr<AudioStreamerBridge> sharedInstance();

    /**
     * Sets an instance of the proxy class that is used to implement the
     * platform specific proxy
     */
    virtual void setPlatformService(const std::shared_ptr<AudioStreamerPlatformService> & ps) = 0;

    /**
     * Gets an instance of the proxy class that is used to implement the
     * platform specific proxy
     */
    virtual std::shared_ptr<AudioStreamerPlatformService> getPlatformService() = 0;

    /** Provides the currently loaded URL song reference */
    virtual std::string getUrl() = 0;

    /**
     * Sets the current URL song reference (will stop the player from playing
     * if it is currently playing)
     */
    virtual void setUrl(const std::string & url) = 0;

    /**
     * Returns a boolean indicating whether or not the player is currently
     * playing some audio
     */
    virtual bool isPlaying() = 0;

    /** Tells the player to start playing audio. */
    virtual void play() = 0;

    /** Tells the player to pause any audio it may be playing. */
    virtual void pause() = 0;
};

} }  // namespace EzoRed::Media
